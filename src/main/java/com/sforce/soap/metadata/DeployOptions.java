package com.sforce.soap.metadata;/** * Generated class, please do not edit. */public class DeployOptions implements com.sforce.ws.bind.XMLizable {  /**   * Constructor   */  public DeployOptions() {  }        /**   * element  : allowMissingFiles of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo allowMissingFiles__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","allowMissingFiles","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean allowMissingFiles__is_set = false;  private boolean allowMissingFiles;  public boolean getAllowMissingFiles() {    return allowMissingFiles;  }    public boolean isAllowMissingFiles() {    return allowMissingFiles;  }    public void setAllowMissingFiles(boolean allowMissingFiles) {    this.allowMissingFiles = allowMissingFiles;    allowMissingFiles__is_set = true;  }    /**   * element  : autoUpdatePackage of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo autoUpdatePackage__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","autoUpdatePackage","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean autoUpdatePackage__is_set = false;  private boolean autoUpdatePackage;  public boolean getAutoUpdatePackage() {    return autoUpdatePackage;  }    public boolean isAutoUpdatePackage() {    return autoUpdatePackage;  }    public void setAutoUpdatePackage(boolean autoUpdatePackage) {    this.autoUpdatePackage = autoUpdatePackage;    autoUpdatePackage__is_set = true;  }    /**   * element  : checkOnly of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo checkOnly__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","checkOnly","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean checkOnly__is_set = false;  private boolean checkOnly;  public boolean getCheckOnly() {    return checkOnly;  }    public boolean isCheckOnly() {    return checkOnly;  }    public void setCheckOnly(boolean checkOnly) {    this.checkOnly = checkOnly;    checkOnly__is_set = true;  }    /**   * element  : ignoreWarnings of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo ignoreWarnings__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","ignoreWarnings","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean ignoreWarnings__is_set = false;  private boolean ignoreWarnings;  public boolean getIgnoreWarnings() {    return ignoreWarnings;  }    public boolean isIgnoreWarnings() {    return ignoreWarnings;  }    public void setIgnoreWarnings(boolean ignoreWarnings) {    this.ignoreWarnings = ignoreWarnings;    ignoreWarnings__is_set = true;  }    /**   * element  : performRetrieve of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo performRetrieve__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","performRetrieve","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean performRetrieve__is_set = false;  private boolean performRetrieve;  public boolean getPerformRetrieve() {    return performRetrieve;  }    public boolean isPerformRetrieve() {    return performRetrieve;  }    public void setPerformRetrieve(boolean performRetrieve) {    this.performRetrieve = performRetrieve;    performRetrieve__is_set = true;  }    /**   * element  : purgeOnDelete of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo purgeOnDelete__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","purgeOnDelete","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean purgeOnDelete__is_set = false;  private boolean purgeOnDelete;  public boolean getPurgeOnDelete() {    return purgeOnDelete;  }    public boolean isPurgeOnDelete() {    return purgeOnDelete;  }    public void setPurgeOnDelete(boolean purgeOnDelete) {    this.purgeOnDelete = purgeOnDelete;    purgeOnDelete__is_set = true;  }    /**   * element  : rollbackOnError of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo rollbackOnError__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","rollbackOnError","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean rollbackOnError__is_set = false;  private boolean rollbackOnError;  public boolean getRollbackOnError() {    return rollbackOnError;  }    public boolean isRollbackOnError() {    return rollbackOnError;  }    public void setRollbackOnError(boolean rollbackOnError) {    this.rollbackOnError = rollbackOnError;    rollbackOnError__is_set = true;  }    /**   * element  : runAllTests of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo runAllTests__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","runAllTests","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean runAllTests__is_set = false;  private boolean runAllTests;  public boolean getRunAllTests() {    return runAllTests;  }    public boolean isRunAllTests() {    return runAllTests;  }    public void setRunAllTests(boolean runAllTests) {    this.runAllTests = runAllTests;    runAllTests__is_set = true;  }    /**   * element  : runTests of type {http://www.w3.org/2001/XMLSchema}string   * java type: java.lang.String[]   */  private static final com.sforce.ws.bind.TypeInfo runTests__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","runTests","http://www.w3.org/2001/XMLSchema","string",0,-1,true);  private boolean runTests__is_set = false;  private java.lang.String[] runTests = new java.lang.String[0];  public java.lang.String[] getRunTests() {    return runTests;  }    public void setRunTests(java.lang.String[] runTests) {    this.runTests = runTests;    runTests__is_set = true;  }    /**   * element  : singlePackage of type {http://www.w3.org/2001/XMLSchema}boolean   * java type: boolean   */  private static final com.sforce.ws.bind.TypeInfo singlePackage__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","singlePackage","http://www.w3.org/2001/XMLSchema","boolean",1,1,true);  private boolean singlePackage__is_set = false;  private boolean singlePackage;  public boolean getSinglePackage() {    return singlePackage;  }    public boolean isSinglePackage() {    return singlePackage;  }    public void setSinglePackage(boolean singlePackage) {    this.singlePackage = singlePackage;    singlePackage__is_set = true;  }    /**   */  public void write(javax.xml.namespace.QName __element,      com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)      throws java.io.IOException {    __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());        writeFields(__out, __typeMapper);    __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());  }  protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {       __typeMapper.writeBoolean(__out, allowMissingFiles__typeInfo, allowMissingFiles, allowMissingFiles__is_set);    __typeMapper.writeBoolean(__out, autoUpdatePackage__typeInfo, autoUpdatePackage, autoUpdatePackage__is_set);    __typeMapper.writeBoolean(__out, checkOnly__typeInfo, checkOnly, checkOnly__is_set);    __typeMapper.writeBoolean(__out, ignoreWarnings__typeInfo, ignoreWarnings, ignoreWarnings__is_set);    __typeMapper.writeBoolean(__out, performRetrieve__typeInfo, performRetrieve, performRetrieve__is_set);    __typeMapper.writeBoolean(__out, purgeOnDelete__typeInfo, purgeOnDelete, purgeOnDelete__is_set);    __typeMapper.writeBoolean(__out, rollbackOnError__typeInfo, rollbackOnError, rollbackOnError__is_set);    __typeMapper.writeBoolean(__out, runAllTests__typeInfo, runAllTests, runAllTests__is_set);    __typeMapper.writeObject(__out, runTests__typeInfo, runTests, runTests__is_set);    __typeMapper.writeBoolean(__out, singlePackage__typeInfo, singlePackage, singlePackage__is_set);  }  public void load(com.sforce.ws.parser.XmlInputStream __in,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {    __typeMapper.consumeStartTag(__in);    loadFields(__in, __typeMapper);    __typeMapper.consumeEndTag(__in);  }  protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {       __in.peekTag();    if (__typeMapper.verifyElement(__in, allowMissingFiles__typeInfo)) {      setAllowMissingFiles((boolean)__typeMapper.readBoolean(__in, allowMissingFiles__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, autoUpdatePackage__typeInfo)) {      setAutoUpdatePackage((boolean)__typeMapper.readBoolean(__in, autoUpdatePackage__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, checkOnly__typeInfo)) {      setCheckOnly((boolean)__typeMapper.readBoolean(__in, checkOnly__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, ignoreWarnings__typeInfo)) {      setIgnoreWarnings((boolean)__typeMapper.readBoolean(__in, ignoreWarnings__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, performRetrieve__typeInfo)) {      setPerformRetrieve((boolean)__typeMapper.readBoolean(__in, performRetrieve__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, purgeOnDelete__typeInfo)) {      setPurgeOnDelete((boolean)__typeMapper.readBoolean(__in, purgeOnDelete__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, rollbackOnError__typeInfo)) {      setRollbackOnError((boolean)__typeMapper.readBoolean(__in, rollbackOnError__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, runAllTests__typeInfo)) {      setRunAllTests((boolean)__typeMapper.readBoolean(__in, runAllTests__typeInfo, boolean.class));    }    __in.peekTag();    if (__typeMapper.isElement(__in, runTests__typeInfo)) {      setRunTests((java.lang.String[])__typeMapper.readObject(__in, runTests__typeInfo, java.lang.String[].class));    }    __in.peekTag();    if (__typeMapper.verifyElement(__in, singlePackage__typeInfo)) {      setSinglePackage((boolean)__typeMapper.readBoolean(__in, singlePackage__typeInfo, boolean.class));    }  }  public String toString() {    java.lang.StringBuilder sb = new java.lang.StringBuilder();    sb.append("[DeployOptions ");        sb.append(" allowMissingFiles=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(allowMissingFiles)+"'\n");    sb.append(" autoUpdatePackage=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(autoUpdatePackage)+"'\n");    sb.append(" checkOnly=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(checkOnly)+"'\n");    sb.append(" ignoreWarnings=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(ignoreWarnings)+"'\n");    sb.append(" performRetrieve=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(performRetrieve)+"'\n");    sb.append(" purgeOnDelete=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(purgeOnDelete)+"'\n");    sb.append(" rollbackOnError=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(rollbackOnError)+"'\n");    sb.append(" runAllTests=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(runAllTests)+"'\n");    sb.append(" runTests=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(runTests)+"'\n");    sb.append(" singlePackage=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(singlePackage)+"'\n");    sb.append("]\n");    return sb.toString();  }}