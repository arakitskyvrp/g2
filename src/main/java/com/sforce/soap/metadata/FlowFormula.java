package com.sforce.soap.metadata;/** * Generated class, please do not edit. */public class FlowFormula extends com.sforce.soap.metadata.FlowElement {  /**   * Constructor   */  public FlowFormula() {  }        /**   * element  : expression of type {http://www.w3.org/2001/XMLSchema}string   * java type: java.lang.String   */  private static final com.sforce.ws.bind.TypeInfo expression__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","expression","http://www.w3.org/2001/XMLSchema","string",1,1,true);  private boolean expression__is_set = false;  private java.lang.String expression;  public java.lang.String getExpression() {    return expression;  }    public void setExpression(java.lang.String expression) {    this.expression = expression;    expression__is_set = true;  }    /**   * element  : scale of type {http://www.w3.org/2001/XMLSchema}int   * java type: int   */  private static final com.sforce.ws.bind.TypeInfo scale__typeInfo =    new com.sforce.ws.bind.TypeInfo("http://soap.sforce.com/2006/04/metadata","scale","http://www.w3.org/2001/XMLSchema","int",0,1,true);  private boolean scale__is_set = false;  private int scale;  public int getScale() {    return scale;  }    public void setScale(int scale) {    this.scale = scale;    scale__is_set = true;  }    /**   */  public void write(javax.xml.namespace.QName __element,      com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)      throws java.io.IOException {    __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());    __typeMapper.writeXsiType(__out, "http://soap.sforce.com/2006/04/metadata", "FlowFormula");    writeFields(__out, __typeMapper);    __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());  }  protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {   super.writeFields(__out, __typeMapper);    __typeMapper.writeString(__out, expression__typeInfo, expression, expression__is_set);    __typeMapper.writeInt(__out, scale__typeInfo, scale, scale__is_set);  }  public void load(com.sforce.ws.parser.XmlInputStream __in,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {    __typeMapper.consumeStartTag(__in);    loadFields(__in, __typeMapper);    __typeMapper.consumeEndTag(__in);  }  protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,      com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {   super.loadFields(__in, __typeMapper);    __in.peekTag();    if (__typeMapper.verifyElement(__in, expression__typeInfo)) {      setExpression((java.lang.String)__typeMapper.readString(__in, expression__typeInfo, java.lang.String.class));    }    __in.peekTag();    if (__typeMapper.isElement(__in, scale__typeInfo)) {      setScale((int)__typeMapper.readInt(__in, scale__typeInfo, int.class));    }  }  public String toString() {    java.lang.StringBuilder sb = new java.lang.StringBuilder();    sb.append("[FlowFormula ");    sb.append(super.toString());    sb.append(" expression=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(expression)+"'\n");    sb.append(" scale=");    sb.append("'"+com.sforce.ws.util.Verbose.toString(scale)+"'\n");    sb.append("]\n");    return sb.toString();  }}